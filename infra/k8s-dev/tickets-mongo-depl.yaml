apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tickets-mongo-depl
  labels:
    app: tickets-mongo
    # testing to see how DO handles this
    someLabelChange: test
spec:
  replicas: 1
  serviceName: 'tickets-mongo'
  selector:
    matchLabels:
      app: tickets-mongo
  template:
    metadata:
      labels:
        app: tickets-mongo
    spec:
      volumes:
        - name: tickets-mongo-storage
          persistentVolumeClaim:
            claimName: tickets-db-pv-claim
      containers:
        - name: tickets-mongo
          image: mongo
          volumeMounts:
            - mountPath: '/data/db'
              name: tickets-mongo-storage
---
apiVersion: v1
kind: Service
metadata:
  name: tickets-mongo-srv
spec:
  type: ClusterIP
  selector:
    app: tickets-mongo
  ports:
    - name: tickets-db
      protocol: TCP
      port: 27017
      targetPort: 27017
---
# Setting up persistant storage in digital ocean... Of course would
# want to do this for every service in a real world app
apiVersion: v1
kind: PersistentVolume
metadata:
  name: tickets-mongo-pv
  labels:
    type: local
    # testing to see how DO handles this on an existing volume
    someLabelChange: test
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: '/mnt/data'
  persistentVolumeReclaimPolicy: Retain
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tickets-db-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
